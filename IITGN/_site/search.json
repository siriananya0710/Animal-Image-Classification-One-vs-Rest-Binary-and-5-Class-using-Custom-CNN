[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Animal Image Classification One-vs-Rest and 5 Class using Custom CNN",
    "section": "",
    "text": "Jupiter Notebooks for One-vs-Rest classification\n\n\n\n\n\n\ncode\n\n\n\n\n\n\n\n\n\nMar 5, 2024\n\n\nSiri Ananya Yallapragada\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog for the IITGN Qualification Task!\n\n\n\n\n\n\nIntroduction\n\n\n\n\n\n\n\n\n\nMar 5, 2024\n\n\nSiri Ananya Yallapragada\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog for the IITGN Qualification Task!",
    "section": "",
    "text": "This repository contains resources and code for performing classification tasks as per the IITGN internship task About task: The dataset comprises 90 different animal images. Initially, we’ll structure it for one-vs-rest classification, followed by binary classification and then a 5-class classification problem. We’ll evaluate each model’s performance using classification matrices."
  },
  {
    "objectID": "posts/welcome/index.html#requirements",
    "href": "posts/welcome/index.html#requirements",
    "title": "Welcome To My Blog for the IITGN Qualification Task!",
    "section": "Requirements",
    "text": "Requirements\n\nPython 3.10\nTensorFlow\nKeras\nNumPy\npandas\nscikit-learn\nMatplotlib\nseaborn\n\n\nDataset Folders\nThe datasets and their corresponding splits for One-vs-Rest Classification are stores in dataset and split folders. The same for 5 class classification are stored in dataset2 and split2 .\n\n\nOne-vs-Rest Classification\novr.ipynb\n\nData Preparation\nFor the purpose of this task, two classes were chosen: raccoons and non-raccoons. To perform for other categories against the remaining classes, a simple python script can be written for all possible combinations. The animals directory contains the original images, and the dataset directory contains the processed data. The split directory contains the train, test and validation splits.\n\n\nData Augmentation\nData augmentation techniques are applied to increase the diversity of the dataset. Augmentation includes random brightness adjustment, zooming, flipping, rotation, and shearing. This was performed on the train set for both classes for upto 225 images. The test and val have 45 images.\n\n\nModel Development\nAfter trial and error, a custom CNN was developed this task. This model includes convolutional layers, max-pooling layers, and fully connected layers. The final layer uses softmax activation for multi-class classification.\n\n\nTraining and Evaluation\nModels are trained and evaluated using training, validation, and test datasets. Training is performed over 100 epochs, and validation data are used to monitor model performance and prevent overfitting. Early stopping techniques are employed to stop training when validation loss starts increasing. The final accuracy achieved on the test set was 85%.\n\n\nResults and Analysis\n\n\n\nModel Accuracy\n\n\nThe plot above shows the training and validation accuracy over epochs. \nThe plot above shows the training and validation loss over epochs. \nThe confusion matrix provides insights into the model’s performance on each class, showing the actual vs. predicted labels.\n\n\n\nFive class Classification\nfive_class.ipynb\n\nData Preparation\nThe dataset is organized into five classes: antelope, badger, cat, dolphin, and elephant.\n\n\nAugmentation\nAugmented images for all the class were generated using various transformations such as random brightness adjustment, zooming, flipping, rotation, and shearing.\n\n\nSplitting\nThe dataset was split into train, test, and validation sets for each class using a stratified split method.\n\n\nCustom CNN Model\nThe model consists of multiple convolutional layers followed by max-pooling layers. The last layer is a fully connected layer with softmax activation for multi-class classification. The model was compiled using the Adam optimizer and categorical cross-entropy loss function.\n\n\nTraining and Evaluation\nThe model was trained for 50 epochs on the training set and evaluated on the test set. The training and validation accuracy and loss were monitored throughout the training process. The final accuracy achieved on the test set was 80%.\n\n\nResults\n The plot above shows the training and validation accuracy over epochs.\n The plot above shows the training and validation loss over epochs.\n The confusion matrix provides insights into the model’s performance on each class, showing the actual vs. predicted labels.\n\n\n\nConvolutional Layer plots\nPlease see: conv_vis.ipynb. A sample image was used per model for the visualization.\n\n\nAcknowledgements and References\n\nThe data used in this project is sourced from Kaggle.\nSources:\n\nhttps://machinelearningmastery.com/one-vs-rest-and-one-vs-one-for-multi-class-classification/\nhttps://medium.com/@agrawalsam1997/multiclass-classification-onevsrest-and-onevsone-classification-strategy-2c293a91571a\nhttps://medium.com/geekculture/multiclass-image-classification-dcf9585f2ff9\nhttps://www.analyticsvidhya.com/blog/2019/04/build-first-multi-label-image-classification-model-python/\n\n\n\n\nAdditional comments and learnings:\n\nAccuracy can be better and worked upon with more time.\nTested the 5 class classification model on state-of-the-art models like VGG 16 and Densenet to understand the baseline to build custom CNN models.\nAttempted to build a custom CNN for 5 class classification based on certains insights from these models."
  }
]